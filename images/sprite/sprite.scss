// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$fb-name: 'fb';
$fb-x: 0px;
$fb-y: 119px;
$fb-offset-x: 0px;
$fb-offset-y: -119px;
$fb-width: 42px;
$fb-height: 41px;
$fb-total-width: 44px;
$fb-total-height: 320px;
$fb-image: '../images/sprite/sprite.png';
$fb: (0px, 119px, 0px, -119px, 42px, 41px, 44px, 320px, '../images/sprite/sprite.png', 'fb', );
$file-name: 'file';
$file-x: 0px;
$file-y: 0px;
$file-offset-x: 0px;
$file-offset-y: 0px;
$file-width: 15px;
$file-height: 15px;
$file-total-width: 44px;
$file-total-height: 320px;
$file-image: '../images/sprite/sprite.png';
$file: (0px, 0px, 0px, 0px, 15px, 15px, 44px, 320px, '../images/sprite/sprite.png', 'file', );
$i-home-name: 'i-home';
$i-home-x: 0px;
$i-home-y: 69px;
$i-home-offset-x: 0px;
$i-home-offset-y: -69px;
$i-home-width: 39px;
$i-home-height: 40px;
$i-home-total-width: 44px;
$i-home-total-height: 320px;
$i-home-image: '../images/sprite/sprite.png';
$i-home: (0px, 69px, 0px, -69px, 39px, 40px, 44px, 320px, '../images/sprite/sprite.png', 'i-home', );
$i-popcorn-name: 'i-popcorn';
$i-popcorn-x: 0px;
$i-popcorn-y: 272px;
$i-popcorn-offset-x: 0px;
$i-popcorn-offset-y: -272px;
$i-popcorn-width: 44px;
$i-popcorn-height: 48px;
$i-popcorn-total-width: 44px;
$i-popcorn-total-height: 320px;
$i-popcorn-image: '../images/sprite/sprite.png';
$i-popcorn: (0px, 272px, 0px, -272px, 44px, 48px, 44px, 320px, '../images/sprite/sprite.png', 'i-popcorn', );
$i-tickets-name: 'i-tickets';
$i-tickets-x: 0px;
$i-tickets-y: 25px;
$i-tickets-offset-x: 0px;
$i-tickets-offset-y: -25px;
$i-tickets-width: 39px;
$i-tickets-height: 34px;
$i-tickets-total-width: 44px;
$i-tickets-total-height: 320px;
$i-tickets-image: '../images/sprite/sprite.png';
$i-tickets: (0px, 25px, 0px, -25px, 39px, 34px, 44px, 320px, '../images/sprite/sprite.png', 'i-tickets', );
$insta-name: 'insta';
$insta-x: 0px;
$insta-y: 170px;
$insta-offset-x: 0px;
$insta-offset-y: -170px;
$insta-width: 42px;
$insta-height: 41px;
$insta-total-width: 44px;
$insta-total-height: 320px;
$insta-image: '../images/sprite/sprite.png';
$insta: (0px, 170px, 0px, -170px, 42px, 41px, 44px, 320px, '../images/sprite/sprite.png', 'insta', );
$vk-name: 'vk';
$vk-x: 0px;
$vk-y: 221px;
$vk-offset-x: 0px;
$vk-offset-y: -221px;
$vk-width: 42px;
$vk-height: 41px;
$vk-total-width: 44px;
$vk-total-height: 320px;
$vk-image: '../images/sprite/sprite.png';
$vk: (0px, 221px, 0px, -221px, 42px, 41px, 44px, 320px, '../images/sprite/sprite.png', 'vk', );
$spritesheet-width: 44px;
$spritesheet-height: 320px;
$spritesheet-image: '../images/sprite/sprite.png';
$spritesheet-sprites: ($fb, $file, $i-home, $i-popcorn, $i-tickets, $insta, $vk, );
$spritesheet: (44px, 320px, '../images/sprite/sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
